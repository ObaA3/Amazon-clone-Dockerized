pipeline {
    agent any 

    options {
        timeout(time: 10, unit: 'MINUTES')
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('obaa3-dockerhub')
        APP_NAME = "obaa3/amazon"
    }

    stages { 
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ObaA3/Amazon-clone-Dockerized.git'
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                // Matches the name you set in Jenkins → Configure System → SonarQube servers
                withSonarQubeEnv('ibt-sonarqube') {
                    sh '''
                        ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectKey=amazon-clone \
                          -Dsonar.projectName="Amazon Clone" \
                          -Dsonar.sources=./ \
                          -Dsonar.host.url=http://192.168.0.183:9000 \
                          -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('login to dockerhub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Build docker image') {
            steps {  
                sh 'docker build -t $APP_NAME:$BUILD_NUMBER .'
            }
        }

        stage('Trivy Scan (Aqua)') {
            steps {
                sh 'trivy image $APP_NAME:$BUILD_NUMBER'
            }
        }

        stage('push image') {
            steps {
                sh 'docker push $APP_NAME:$BUILD_NUMBER'
            }
        }

        stage('Trigger ManifestUpdate') {
            steps {
                build job: 'argocd-manifest-amazon', parameters: [string(name: 'DOCKERTAG', value: env.BUILD_NUMBER)]
            } 
        } 
    }

    post { 
        always { 
            slackSend color: "good", message: "Build Deployed Successfully, Downstream Job Triggered"
        }
    }
}
